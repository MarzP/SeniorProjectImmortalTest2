<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerStand_01</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

//Ability Scores/Mods
global.strscore = 10;
global.strmod = (global.strscore-10)/2;

global.dexscore = 18;
global.dexmod = (global.dexscore-10)/2;

global.conscore = 14;
global.conmod = (global.conscore-10)/2;

global.intscore = 16;
global.intmod = (global.intscore-10)/2;

global.wisscore = 18;
global.wismod = (global.wisscore-10)/2;

global.chascore = 19;
global.chamod = (global.chascore-10)/2;

//Direction
global.right = 1;
global.left =0;
//Keyboard Direcitonal Control
global.keyboard = 1;
///////////////////////////////////////////////////////

//Player HP
global.playerHP = global.conmod + choose (1,2,3,4,5,6,7, 8);
/*
if (global.playerHP &lt;= 1) {
global.playerHP = 1;
}
*/
///////////////////////////////////////////////////////

//Player AC
global.playerAC = global.dexmod;

///////////////////////////////////////////////////////

image_xscale = -1;
//image_alpha = 0.5;
image_speed = .5;
alarm[0] = 0;
global.color = 0;

////////////////////////////////////////////////////////
//Magic Missile
missile = 1; mm = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
 //Check Direction
        if (global.right == 1) {
            if (missile &gt;&gt; 0) {
                mm = instance_create(x+5, y-30, obj_magicMissile);
                //missile -= 1;
                mm.speed = 15;
                mm.direction = 0;
                mm.image_xscale = 1;
            }
        }
        if (global.left == 1) {
            if (missile &gt;&gt; 0) {
                mm = instance_create(x-5, y -30, obj_magicMissile);
                //missile -=1;
                mm.speed = 15;
                mm.direction = 180;
                mm.image_xscale = -1;
           }
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Maintaining Ability Modifiers

global.strmod = (global.strscore-10)/2;
global.dexmod = (global.dexscore-10)/2;
global.conmod = (global.conscore-10)/2;
global.intmod = (global.intscore-10)/2;
global.wismod = (global.wisscore-10)/2;
global.chamod = (global.chascore-10)/2;

//Dexterity Modifer never equals 0

if (global.dexmod &lt;= 0) {
    global.dexmod = 1;
}

//Choosing Arrows or WASD
if (keyboard_check(vk_numpad1)){
    //arrows
    global.keyboard = 1;
    } else if (keyboard_check(vk_numpad2)) {
    //WASD
    global.keyboard = 2;
}

//Horizontal Movement
if (global.keyboard == 1) {
    switch (keyboard_key) {

        case vk_left :
            if (place_free(x-global.dexmod, y)) {
                //image_xscale = -1;
                image_speed = 0.5;
                x-= global.dexmod;
                global.left = 1; global.right = 0;

            }
    break;
        case vk_right :
            if (place_free(x+global.dexmod, y)) {
                //image_xscale = 1;
                image_speed = 0.5;
                x+= global.dexmod;
                global.left = 0; global.right = 1;
            }
    break;
       
    
    } 
} else if (global.keyboard == 2) {
    switch (keyboard_key) {
        case ord("A") :
            if (place_free(x-global.dexmod, y)) {
                //image_xscale = -1;
                image_speed = 0.5;
                x-= global.dexmod;
                global.left = 1; global.right = 0;

            }
    break;
        case ord("D") :
            if (place_free(x+global.dexmod, y)) {
                //image_xscale = 1;
                image_speed = 0.5;
                x += global.dexmod;
                global.left = 0; global.right = 1;
    break;
        
        }
    }
}

if (global.right == 1) {
    image_xscale = 1;
}
if (global.left == 1) {
    image_xscale = -1;
}

/////////////////////////////////////////////////////////////////////////
/// Check for ledge grab state
var falling = y-yprevious &gt; 0;
var wasnt_wall = !position_meeting(x+16*image_xscale, yprevious, obj_solid);
var is_wall = position_meeting(x+16*image_xscale, y, obj_solid);

if (falling &amp;&amp; wasnt_wall &amp;&amp; is_wall) {
    hspeed = 0;
    vspeed = 0;
    
    // Move against the ledge
    while (!place_meeting(x+image_xscale, y, obj_solid)) {
        x+=image_xscale;
    }
    
    // Make sure we are the right height
    while (position_meeting(x+16*image_xscale, y-1, obj_solid)) {
        y-=1;
    }
    }
    //sprite_index = spr_player_ledge_grab;
    //state = ledge_grab_state;

///////////////////////////////////////////////////////////////////////////
/*
//Horizontal Movement
    //Arrows
if (global.keyboard == 1) {

hspeed = (keyboard_check(vk_right) - keyboard_check(vk_left))*global.dexmod;
}
    //WASD
if (global.keyboard == 2) {
hspeed = (keyboard_check(ord("D")) - keyboard_check(ord("A")))*global.dexmod;
}

switch (keyboard_key) {
    case vk_left :
    case ord("A"):
    if (place_free(x-global.dexmod, y)) {
       //x -= global.dexmod;
       global.left = 1; global.right = 0;
       image_xscale = -1;
       }
       break;
    case vk_right:
    case ord("D"):
     if (place_free(x+global.dexmod, y)) {
       //x += global.dexmod;
       global.left = 0; global.right =1;
       image_xscale = 1;
       }
       break; 
    }
    */
    
//Jumping
if (!place_free(x, y+1)) &amp;&amp; place_free(x,y-1) &amp;&amp; keyboard_check_pressed(vk_space) {
    vspeed = -9;
}
//Gravity
if(place_free(x,y+1)) {
    gravity = .75;
        if(vspeed &gt;= 10){
            vspeed =10;
    }
  
} else {
    gravity =0; 
}
      /*
//Magic Missile Attack
if (keyboard_check_pressed(vk_control)) {

    if(missile &gt;&gt; 0) {
    //Create Missile
        mm = instance_create(x,y, obj_magicMissile);
        missile -=1;
        mm.speed = 15;
    //Check Direction 
    if(global.right == 1) {
        mm.direction = 0;
        mm.image_xscale = 1;
        } else if (global.left == 1){
        mm.direction = 180;
        mm.image_xscale = -1;
        }
    if(missile &lt;= 0) {
        missile = 1;
}
    } 

*/

//Magic Missile Attack
if (keyboard_check (vk_control)) { /*
        //Check Direction
        if (global.right == 1) {
            if (missile &gt;&gt; 0) {
                mm = instance_create(x+5, y-30, obj_magicMissile);
                missile -= 1;
                mm.speed = 15;
                mm.direction = 0;
                mm.image_xscale = 1;
            }
        }
        if (global.left == 1) {
            if (missile &gt;&gt; 0) {
                mm = instance_create(x-5, y -30, obj_magicMissile);
                missile -=1;
                mm.speed = 15;
                mm.direction = 180;
                mm.image_xscale = -1;
           }
        }
        */
        if (alarm[0] = -1) {
            alarm = 20; 
        }
        
    }    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
move_contact_solid(direction, global.dexmod );
vspeed = 0;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Do skin, body, hair order because of layering

if (global.color == 0) {
draw_sprite(spr_playerStand_01, 0,x,y) 
}
if (global.color == 1) {
draw_sprite(spr_playerStand_02, 0,x,y) 
}
if (global.color == 2) {
draw_sprite(spr_playerStand_03, 0,x,y) 
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
